name: Security and Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js (Frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
    
    - name: Setup Python (Backend)
      if: matrix.component == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Frontend Security Audit
      if: matrix.component == 'frontend'
      working-directory: ./frontend
      run: |
        yarn install --frozen-lockfile
        yarn audit --level moderate
    
    - name: Backend Security Audit
      if: matrix.component == 'backend'
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install safety
        pip install -r requirements.txt
        safety check
    
    - name: Create security issue
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security vulnerability detected in ${{ matrix.component }}`,
            body: `A security vulnerability has been detected in the ${{ matrix.component }} dependencies. Please review and update the affected packages.`,
            labels: ['security', 'dependencies', '${{ matrix.component }}']
          })

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      working-directory: ./backend
      run: docker build -t snaprate-backend:security-scan .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'snaprate-backend:security-scan'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Update frontend dependencies
      working-directory: ./frontend
      run: |
        yarn upgrade --latest
        yarn audit fix || true
    
    - name: Update backend dependencies
      working-directory: ./backend
      run: |
        pip install pip-tools
        pip-compile --upgrade requirements.txt
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'Automated dependency updates'
        body: |
          This PR contains automated dependency updates.
          
          Please review the changes and ensure all tests pass before merging.
          
          - Frontend dependencies updated via `yarn upgrade --latest`
          - Backend dependencies updated via `pip-compile --upgrade`
        branch: automated-dependency-updates
        delete-branch: true
        labels: |
          dependencies
          automated
          maintenance

  health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Check frontend health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://snaprate.example.com)
        if [ $response -ne 200 ]; then
          echo "Frontend health check failed with status: $response"
          exit 1
        fi
        echo "Frontend is healthy"
    
    - name: Check backend health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://api.snaprate.example.com/healthcheck)
        if [ $response -ne 200 ]; then
          echo "Backend health check failed with status: $response"
          exit 1
        fi
        echo "Backend is healthy"
    
    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'SnapRate production health check failed! ðŸš¨'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}